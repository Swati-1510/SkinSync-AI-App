// in utils/cacheService.js
import AsyncStorage from '@react-native-async-storage/async-storage';

// The key under which we will store our cache object
const ROUTINE_CACHE_KEY = '@SkinSync_Routine_Cache';
const CACHE_LIFETIME_MS = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

/**
 * Attempts to retrieve a valid, non-expired routine from AsyncStorage.
 * @returns {object | null} The routine data or null if expired/missing.
 */
export const getCachedRoutine = async () => {
    try {
        const cachedData = await AsyncStorage.getItem(ROUTINE_CACHE_KEY);
        if (!cachedData) {
            console.log("CACHE: No routine found in storage.");
            return null;
        }

        const cacheObject = JSON.parse(cachedData);
        const now = new Date().getTime();

        if (now > cacheObject.timestamp + CACHE_LIFETIME_MS) {
            console.log("CACHE: Routine found but has EXPIRED.");
            // Optional: clear expired data
            await AsyncStorage.removeItem(ROUTINE_CACHE_KEY);
            return null;
        }

        console.log("CACHE: Routine found and is VALID. Returning cached data.");
        return cacheObject.routine;

    } catch (error) {
        console.error("CACHE ERROR: Failed to get routine.", error);
        return null;
    }
};

/**
 * Saves the new routine and a timestamp to AsyncStorage.
 * @param {object} routineData - The routine generated by the AI.
 */
export const setCachedRoutine = async (routineData) => {
    try {
        const cacheObject = {
            routine: routineData,
            timestamp: new Date().getTime(),
        };
        await AsyncStorage.setItem(ROUTINE_CACHE_KEY, JSON.stringify(cacheObject));
        console.log("CACHE: New routine successfully saved with timestamp.");
    } catch (error) {
        console.error("CACHE ERROR: Failed to save routine.", error);
    }
};